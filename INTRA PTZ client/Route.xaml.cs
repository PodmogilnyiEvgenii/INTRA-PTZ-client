using System.Windows;
using System.Windows.Controls;
using System.Collections.Generic;
using System.Diagnostics;
using System.Windows.Navigation;
using System.Collections;
using System.Windows.Controls.Primitives;
using System.Windows.Media;
using System;
using System.Data.Common;

namespace INTRA_PTZ_client
{
    public partial class RouteWindow : Window
    {
        private MainWindow mainWindow;
        private List<Route.RouteTableRow> savedRouteList = new List<Route.RouteTableRow>();

        public RouteWindow(MainWindow mainWindow)
        {
            InitializeComponent();
            this.mainWindow = mainWindow;
            this.Loaded += RouteWindow_Loaded;
            this.IsVisibleChanged += RouteWindow_IsVisibleChanged;
            this.Closing += RouteWindow_Closing;
        }

        private void RouteWindow_Loaded(object sender, RoutedEventArgs e)
        {
            //routeTable.AutoGeneratingColumn += RouteTable_AutoGeneratedColumns;
        }
        private void RouteWindow_IsVisibleChanged(object sender, DependencyPropertyChangedEventArgs e)
        {
            savedRouteList = mainWindow.Device.Route.GetRouteList();
            routeTable.ItemsSource = mainWindow.Device.Route.GetRouteList();

        }
        private void RouteWindow_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;
            Hide();
        }

        public void RouteTable_AutoGeneratedColumns(object s, DataGridAutoGeneratingColumnEventArgs e)
        {
            //routeTable.Columns[0].Header = "№";
        }

        private void TableMenuAddRowUp_Click(object sender, RoutedEventArgs e)
        {
            mainWindow.Device.Route.addrouteListUp(routeTable.SelectedIndex < 0 ? 0 : routeTable.SelectedIndex);
            routeTable.ItemsSource = mainWindow.Device.Route.GetRouteList();
        }

        private void TableMenuAddRowDown_Click(object sender, RoutedEventArgs e)
        {
            //System.Diagnostics.Trace.WriteLine(routeTable.SelectedIndex);
            mainWindow.Device.Route.addrouteListDown(routeTable.SelectedIndex < 0 ? 0 : routeTable.SelectedIndex);
            routeTable.ItemsSource = mainWindow.Device.Route.GetRouteList();
        }

        private void TableMenuDeleteRow_Click(object sender, RoutedEventArgs e)
        {
            mainWindow.Device.Route.routeListDeleteRow(routeTable.SelectedIndex);
            routeTable.ItemsSource = mainWindow.Device.Route.GetRouteList();
        }

        private void TableMenuDeleteAll_Click(object sender, RoutedEventArgs e)
        {
            mainWindow.Device.Route.routeListDeleteAll();
            routeTable.ItemsSource = mainWindow.Device.Route.GetRouteList();
        }

        private void TableMenuStartFromThisRow_Click(object sender, RoutedEventArgs e)
        {

        }

        private void RouteSaveButton_Click(object sender, RoutedEventArgs e)
        {
            //mainWindow.Device.Route.SetRouteList(mainWindow.Device.Route.GetRouteList());
            /*
            List<Route.RouteTableRow> list = mainWindow.Device.Route.GetRouteList();

            for (int i = 0; i < list.Count; i++)
            {
                System.Diagnostics.Trace.WriteLine(list[i]);
            } 
            */
            routeWindow.Visibility = Visibility.Hidden;
        }

        private void RouteCancelButton_Click(object sender, RoutedEventArgs e)
        {
            mainWindow.Device.Route.SetRouteList(savedRouteList);
            routeWindow.Visibility = Visibility.Hidden;
        }

        private void Hyperlink_OpenWebConsole(object sender, RequestNavigateEventArgs e)
        {
            Process.Start(new ProcessStartInfo(/*e.Uri.AbsoluteUri*/"http://" + mainWindow.Device.Ip) { UseShellExecute = true });
            e.Handled = true;
        }

        private void StartPauseRouteButton_Click(object sender, RoutedEventArgs e)
        {
            if (mainWindow.Device.Route.GetIsStart())
            {
                mainWindow.Device.Route.SetIsStart(false);
                startPauseRouteButton.Content = "Старт";
                //TODO
            }
            else
            {
                mainWindow.Device.Route.SetIsStart(true);
                startPauseRouteButton.Content = "Пауза";
                //TODO
            }
        }

        private void StopRouteButton_Click(object sender, RoutedEventArgs e)
        {
            mainWindow.Device.Route.SetIsStart(false);
            startPauseRouteButton.Content = "Старт";
            //TODO
        }

        private void ComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            ComboBox comboBox = (System.Windows.Controls.ComboBox)sender;
            DataGridRow dataGridRow = FindParent<DataGridRow>(comboBox);
            int index = dataGridRow.GetIndex();
            string selected = comboBox.SelectedItem as string;

            int type = (int)Enum.Parse(typeof(Route.RouteTableRow.OperationTypeEnum), selected);
            DataGridCell cell = new DataGridCell();

            switch (type)
            {
                case 0:     //Калибровка

                    mainWindow.Device.Route.setRouteTypeByIndex(index, type);

                    cell = routeTable.Columns[2].GetCellContent(dataGridRow).Parent as DataGridCell;  
                    cell.Background = Brushes.Black;
                    cell.Foreground = Brushes.Black;                   

                    cell = routeTable.Columns[3].GetCellContent(dataGridRow).Parent as DataGridCell;
                    cell.Background = Brushes.Black;
                    //cell.Foreground = Brushes.Black;
                    break;

                case 1:     //Координаты

                    mainWindow.Device.Route.setRouteTypeByIndex(index, type);

                    cell = routeTable.Columns[2].GetCellContent(dataGridRow).Parent as DataGridCell;
                    cell.Background = Brushes.Transparent;
                    //cell.Foreground = Brushes.Black;

                    cell = routeTable.Columns[3].GetCellContent(dataGridRow).Parent as DataGridCell;
                    cell.Background = Brushes.Transparent;
                    //cell.Foreground = Brushes.Black;
                    break;

                case 2:     //Пресет

                    mainWindow.Device.Route.setRouteTypeByIndex(index, type);

                    cell = routeTable.Columns[2].GetCellContent(dataGridRow).Parent as DataGridCell;
                    cell.Background = Brushes.Transparent;
                    //cell.Foreground = Brushes.Black;

                    cell = routeTable.Columns[3].GetCellContent(dataGridRow).Parent as DataGridCell;
                    cell.Background = Brushes.Black;
                    //cell.Foreground = Brushes.Black;
                    break;
            }  
        }

        public static Parent FindParent<Parent>(DependencyObject child)
            where Parent : DependencyObject
        {
            DependencyObject parentObject = child;

            //We are not dealing with Visual, so either we need to fnd parent or
            //get Visual to get parent from Parent Heirarchy.
            while (!((parentObject is System.Windows.Media.Visual)
                    || (parentObject is System.Windows.Media.Media3D.Visual3D)))
            {
                if (parentObject is Parent || parentObject == null)
                {
                    return parentObject as Parent;
                }
                else
                {
                    parentObject = (parentObject as FrameworkContentElement).Parent;
                }
            }

            //We have not found parent yet , and we have now visual to work with.
            parentObject = VisualTreeHelper.GetParent(parentObject);

            //check if the parent matches the type we're looking for
            if (parentObject is Parent || parentObject == null)
            {
                return parentObject as Parent;
            }
            else
            {
                //use recursion to proceed with next level
                return FindParent<Parent>(parentObject);
            }
        }
    }
}
